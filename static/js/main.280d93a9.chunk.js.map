{"version":3,"sources":["logo.svg","components/List/index.js","components/ItemForm/index.js","components/Item/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Wrapper","styled","div","_templateObject","List","_ref","list","onItemDelete","react_default","a","createElement","map","item","components_Item","key","id","done","name","childList","onDelete","Form","ItemForm_templateObject","Button","button","_templateObject2","ItemForm","onSubmit","submitText","_useState","useState","_useState2","Object","slicedToArray","itemName","updateItemName","v4","inputFieldId","concat","handleSubmit","e","preventDefault","htmlFor","type","onChange","target","value","onKeyPress","charCode","onClick","Item_templateObject","DoneItemDiv","Item_templateObject2","_templateObject3","Item","isRoot","_useState3","_useState4","itemChildList","updateItemChildList","_useState5","_useState6","itemDone","updateItemDone","handleItemClick","handleDelete","DeleteButton","Item_Button","Item_Wrapper","console","log","components_ItemForm","newItem","itemArr","toConsumableArray","components_List","newList","filter","App_templateObject","TodoData","App","state","todos","this","App_Wrapper","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.280d93a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport styled from 'styled-components';\n\nimport Item from '../Item';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-evenly;\n`;\n\nfunction List({ list, onItemDelete }) {\n  return (\n    <Wrapper>\n      {list.map(item => (\n        <Item \n          key={item.id}\n          id={item.id}\n          done={item.done}\n          name={item.name}\n          childList={item.list}\n          onDelete={onItemDelete}\n        />\n      ))}\n    </Wrapper>\n  )\n}\n\nexport default List;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { v4 } from 'uuid';\n\nconst Form = styled.div`\n  margin: 2em;\n  padding: 1.5em;\n  border: none;\n  border-radius: 5px;\n  background-color: #F5F5F5;\n`;\n\nconst Button = styled.button`\n  margin-left: 1em;\n`;\n\nfunction ItemForm({ onSubmit, submitText }) {\n  const [ itemName, updateItemName ] = useState('');\n\n  const id = v4();\n  const inputFieldId = `item-name-field-${id}`;\n\n  function handleChange(e) {\n    updateItemName(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    if (!itemName) {\n      return;\n    }\n\n    const item = {\n      id,\n      name: itemName,\n      done: false,\n      list: [],\n    };\n\n    onSubmit(item);\n  }\n\n  function handleKeyPress(e) {\n    if (e.charCode === 13) {\n      handleSubmit(e);      \n    }\n  }\n\n  return (\n    <Form>\n      <label htmlFor={inputFieldId}>\n        Item Name:{' '}\n        <input htmlFor={inputFieldId}\n          type=\"text\"\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n          value={itemName} />\n      </label>\n      <Button type=\"submit\" onClick={handleSubmit}>{submitText}</Button>\n    </Form>\n  );\n}\n\nexport default ItemForm;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport List from '../List';\nimport ItemForm from '../ItemForm';\n\nconst Wrapper = styled.div`\n  margin: 2em 1em;\n  padding: 1.5em;\n  border: none;\n  border-radius: 10px;\n  box-shadow: 5px 5px 10px #888888;\n`;\n\nconst DoneItemDiv = styled.div`\n  background-color: #FF6347;\n  font-weight: bold;\n  padding: 1.5em;\n  margin: 1.5em auto;\n  text-decoration: line-through;\n  cursor: pointer;\n  max-width: 200px;\n`;\n\nconst Button = styled.button`\n  margin-left: 1em;\n`;\n\nfunction Item({ id, name, done, isRoot, childList, onDelete }) {\n  const [ itemName, updateItemName ] = useState(name);\n  const [ itemChildList, updateItemChildList] = useState(childList);\n  const [ itemDone, updateItemDone ] = useState(done);\n\n  function handleChange(e) {\n    updateItemName(e.target.value);\n  }\n\n  function handleKeyPress(e) {\n    console.log(e.charCode);\n  }\n\n  function addItem(newItem) {\n    const itemArr = [ ...itemChildList, newItem ];\n\n    updateItemChildList(itemArr);\n  }\n\n  function handleItemClick() {\n    updateItemDone(!itemDone);\n  }\n\n  function handleDelete() {\n    onDelete(id);\n  }\n\n  function handleChildItemDelete(id) {\n    const newList = itemChildList.filter(item => item.id !== id);\n\n    updateItemChildList(newList);\n  }\n\n  const inputFieldId = `item-name-${id}`\n\n  const DeleteButton = () => (\n    <Button\n      type=\"button\"\n      onClick={handleDelete}\n    >\n      Remove\n    </Button>\n  );\n\n  return (\n    <Wrapper>\n      <div>\n        {itemDone ?\n          (\n            <DoneItemDiv onClick={handleItemClick}>\n              {itemName}\n              <DeleteButton />\n            </DoneItemDiv>\n          ) :\n          (\n            <div>\n              <label htmlFor={inputFieldId}>\n                Item Name:{' '}\n                <input\n                  id={inputFieldId}\n                  type=\"text\"\n                  onChange={handleChange}\n                  onKeyPress={handleKeyPress}\n                  value={itemName}\n                />\n                {!isRoot && (\n                  <Button type=\"button\" onClick={handleItemClick}>\n                    Done\n                  </Button>\n                )}\n                {!isRoot && <DeleteButton />}\n              </label>\n            </div>\n          )\n        }\n\n        <ItemForm onSubmit={addItem} submitText=\"Add\"/>\n      </div>\n      <List list={itemChildList} onItemDelete={handleChildItemDelete}/>\n    </Wrapper>\n  );\n}\n\nexport default Item;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport logo from './logo.svg';\nimport './App.css';\nimport {v4} from 'uuid';\n\nimport Item from './components/Item';\n\nconst Wrapper = styled.div`\n  padding: 5em 5em;\n  min-width: 480px;\n`;\n\nconst TodoData = { \n  id: v4(),\n  name: 'foo',\n  done: false,\n  list: [{\n    id: v4(),\n    name: 'bar',\n    done: false,\n    list: [],\n  }],\n};\n\nclass App extends Component {\n  state = {\n    todos: TodoData,\n  };\n\n  render() {\n    const { todos } = this.state;\n\n    return (\n      <Wrapper className=\"App\">\n        <Item \n          id={todos.id} \n          name={todos.name} \n          isRoot\n          childList={todos.list}\n        />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}