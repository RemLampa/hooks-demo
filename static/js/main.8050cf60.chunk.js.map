{"version":3,"sources":["logo.svg","components/ItemForm/index.js","components/Item/index.js","components/List/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Form","styled","div","_templateObject","Button","button","_templateObject2","ItemForm","_ref","onSubmit","submitText","_useState","useState","_useState2","Object","slicedToArray","itemName","updateItemName","id","v4","inputFieldId","concat","react_default","a","createElement","htmlFor","type","onChange","e","target","value","onClick","preventDefault","name","done","list","Wrapper","Item_templateObject","DoneItemDiv","Item_templateObject2","_templateObject3","Item","childList","onDelete","_useState3","_useState4","itemChildList","updateItemChildList","_useState5","_useState6","itemDone","updateItemDone","handleItemClick","handleDelete","DeleteButton","Item_Button","onKeyPress","console","log","charCode","components_ItemForm","newItem","itemArr","toConsumableArray","components_List","onItemDelete","newList","filter","item","List_templateObject","List","List_Wrapper","map","components_Item","key","TodoData","App","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8050cf60.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { v4 } from 'uuid';\n\nconst Form = styled.div`\n  margin: 2em;\n  padding: 1.5em;\n  border: none;\n  border-radius: 5px;\n  background-color: #F5F5F5;\n`;\n\nconst Button = styled.button`\n  margin-left: 1em;\n`;\n\nfunction ItemForm({ onSubmit, submitText }) {\n  const [ itemName, updateItemName ] = useState('');\n\n  const id = v4();\n  const inputFieldId = `item-name-field-${id}`;\n\n  function handleChange(e) {\n    updateItemName(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    if (!itemName) {\n      return;\n    }\n\n    const item = {\n      name: itemName,\n      done: false,\n      list: [],\n    };\n\n    onSubmit(item);\n  }\n\n  return (\n    <Form>\n      <label htmlFor={inputFieldId}>\n        Item Name:{' '}\n        <input htmlFor={inputFieldId}\n          type=\"text\"\n          onChange={handleChange}\n          value={itemName} />\n      </label>\n      <Button type=\"submit\" onClick={handleSubmit}>{submitText}</Button>\n    </Form>\n  );\n}\n\nexport default ItemForm;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport List from '../List';\nimport ItemForm from '../ItemForm'; \n\nconst Wrapper = styled.div`\n  margin: 2em 1em;\n  padding: 1.5em;\n  border: none;\n  border-radius: 10px;\n  box-shadow: 5px 5px 10px #888888;\n`;\n\nconst DoneItemDiv = styled.div`\n  background-color: #FF6347;\n  font-weight: bold;\n  padding: 1.5em;\n  margin: 1.5em auto;\n  text-decoration: line-through;\n  cursor: pointer;\n  max-width: 200px;\n`;\n\nconst Button = styled.button`\n  margin-left: 1em;\n`;\n\nfunction Item({ id, name, done, childList, onDelete }) {\n  const [ itemName, updateItemName ] = useState(name);\n  const [ itemChildList, updateItemChildList] = useState(childList);\n  const [ itemDone, updateItemDone ] = useState(done);\n\n  function handleChange(e) {\n    updateItemName(e.target.value);\n  }\n\n  function handleKeyPress(e) {\n    console.log(e.charCode);\n  }\n\n  function addItem(newItem) {\n    const itemArr = [ ...itemChildList, newItem ];\n\n    updateItemChildList(itemArr);\n  }\n\n  function handleItemClick() {\n    updateItemDone(!itemDone);\n  }\n\n  function handleDelete() {\n    onDelete(id);\n  }\n\n  function handleChildItemDelete(id) {\n    const newList = itemChildList.filter(item => item.id !== id);\n\n    updateItemChildList(newList);\n  }\n\n  const inputFieldId = `item-name-${id}`\n\n  const DeleteButton = () => (\n    <Button\n      type=\"button\"\n      onClick={handleDelete}\n    >\n      Remove\n    </Button>\n  );\n\n  return (\n    <Wrapper>\n      <div>\n        {itemDone ?\n          (\n            <DoneItemDiv onClick={handleItemClick}>\n              {itemName}\n              <DeleteButton />\n            </DoneItemDiv>\n          ) :\n          (\n            <div>\n              <label htmlFor={inputFieldId}>\n                Item Name:{' '}\n                <input\n                  id={inputFieldId}\n                  type=\"text\"\n                  onChange={handleChange}\n                  onKeyPress={handleKeyPress}\n                  value={itemName}\n                />\n                    <Button type=\"button\" onClick={handleItemClick}>Done</Button>\n                    <DeleteButton />\n              </label>\n            </div>\n          )\n        }\n\n        <ItemForm onSubmit={addItem} submitText=\"Add\"/>\n      </div>\n      <List list={itemChildList} onItemDelete={handleChildItemDelete}/>\n    </Wrapper>\n  );\n}\n\nexport default Item;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport Item from '../Item';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nfunction List({ list, onItemDelete }) {\n  \n  return (\n    <Wrapper>\n      {list.map(item => (\n        <Item key={item.id}\n          id={item.id}\n          done={item.done}\n          name={item.name}\n          childList={item.list}\n          onDelete={onItemDelete}\n        />\n      ))}\n    </Wrapper>\n  )\n}\n\nexport default List;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {v4} from 'uuid';\nimport List from './components/List';\n\nconst TodoData = [{ \n  id: v4(),\n  name: 'foo',\n  done: false,\n  list: [{\n    id: v4(),\n    name: 'bar',\n    done: false,\n    list: [],\n  }],\n}];\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <List list={TodoData} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}